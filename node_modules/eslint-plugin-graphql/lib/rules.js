'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OperationsMustHaveNames = OperationsMustHaveNames;
exports.RequiredFields = RequiredFields;
exports.typeNamesShouldBeCapitalized = typeNamesShouldBeCapitalized;

var _graphql = require('graphql');

function OperationsMustHaveNames(context) {
  return {
    OperationDefinition: function OperationDefinition(node) {
      if (!node.name) {
        context.reportError(new _graphql.GraphQLError("All operations must be named", [node]));
      }
    }
  };
}

function RequiredFields(context, options) {
  return {
    Field: function Field(node) {
      var def = context.getFieldDef();
      if (!def) {
        return;
      }
      var requiredFields = options.requiredFields;

      requiredFields.forEach(function (field) {
        var fieldAvaliableOnType = def.type && def.type._fields && def.type._fields[field];

        function recursivelyCheckOnType(ofType, field) {
          return ofType._fields && ofType._fields[field] || ofType.ofType && recursivelyCheckOnType(ofType.ofType, field);
        }

        var fieldAvaliableOnOfType = false;
        if (def.type && def.type.ofType) {
          fieldAvaliableOnOfType = recursivelyCheckOnType(def.type.ofType, field);
        }
        if (fieldAvaliableOnType || fieldAvaliableOnOfType) {
          var fieldWasRequested = !!node.selectionSet.selections.find(function (n) {
            return n.name.value === field || n.kind === 'FragmentSpread';
          });
          if (!fieldWasRequested) {
            context.reportError(new _graphql.GraphQLError('\'' + field + '\' field required on \'' + node.name.value + '\'', [node]));
          }
        }
      });
    }
  };
}

function typeNamesShouldBeCapitalized(context) {
  return {
    NamedType: function NamedType(node) {
      var typeName = node.name.value;
      if (typeName[0] == typeName[0].toLowerCase()) {
        context.reportError(new _graphql.GraphQLError("All type names should start with a capital letter", [node]));
      }
    }
  };
}