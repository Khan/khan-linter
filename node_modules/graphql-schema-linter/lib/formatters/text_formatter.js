"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TextFormatter;

var _columnify = _interopRequireDefault(require("columnify"));

var _figures = _interopRequireDefault(require("../figures"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextFormatter(errorsGroupedByFile) {
  const files = Object.keys(errorsGroupedByFile);
  const errorsText = files.map(file => {
    return generateErrorsForFile(file, errorsGroupedByFile[file]);
  }).join('\n\n');
  const summary = generateSummary(errorsGroupedByFile);
  return errorsText + '\n\n' + summary + '\n';
}

function generateErrorsForFile(file, errors) {
  const formattedErrors = errors.map(error => {
    const location = error.locations[0];
    return {
      location: _chalk.default.dim(`${location.line}:${location.column}`),
      message: error.message,
      rule: _chalk.default.dim(` ${error.ruleName}`)
    };
  });
  const errorsText = (0, _columnify.default)(formattedErrors, {
    showHeaders: false
  });
  return _chalk.default.underline(file) + '\n' + errorsText;
}

function generateSummary(errorsGroupedByFile) {
  const files = Object.keys(errorsGroupedByFile);
  const errorsCount = files.reduce((sum, file) => {
    return sum + errorsGroupedByFile[file].length;
  }, 0);

  if (errorsCount == 0) {
    return _chalk.default.green(`${_figures.default.tick} 0 errors detected\n`);
  }

  const summary = _chalk.default.red(`${_figures.default.cross} ${errorsCount} error` + (errorsCount > 1 ? 's' : '') + ' detected');

  return summary;
}