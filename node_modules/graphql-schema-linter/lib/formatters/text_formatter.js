'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TextFormatter;

var _columnify = require('columnify');

var _columnify2 = _interopRequireDefault(_columnify);

var _figures = require('../figures');

var _figures2 = _interopRequireDefault(_figures);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextFormatter(errorsGroupedByFile) {
  var files = Object.keys(errorsGroupedByFile);

  var errorsText = files.map(function (file) {
    return generateErrorsForFile(file, errorsGroupedByFile[file]);
  }).join('\n\n');

  var summary = generateSummary(errorsGroupedByFile);

  return errorsText + '\n\n' + summary + '\n';
}

function generateErrorsForFile(file, errors) {
  var formattedErrors = errors.map(function (error) {
    var location = error.locations[0];

    return {
      location: _chalk2.default.dim(location.line + ':' + location.column),
      message: error.message,
      rule: _chalk2.default.dim(' ' + error.ruleName)
    };
  });

  var errorsText = (0, _columnify2.default)(formattedErrors, {
    showHeaders: false
  });

  return _chalk2.default.underline(file) + '\n' + errorsText;
}

function generateSummary(errorsGroupedByFile) {
  var files = Object.keys(errorsGroupedByFile);

  var errorsCount = files.reduce(function (sum, file) {
    return sum + errorsGroupedByFile[file].length;
  }, 0);

  if (errorsCount == 0) {
    return _chalk2.default.green(_figures2.default.tick + ' 0 errors detected\n');
  }

  var summary = _chalk2.default.red(_figures2.default.cross + ' ' + errorsCount + ' error' + (errorsCount > 1 ? 's' : '') + ' detected');

  return summary;
}