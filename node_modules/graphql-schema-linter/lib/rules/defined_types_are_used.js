'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefinedTypesAreUsed = DefinedTypesAreUsed;

var _validation_error = require('../validation_error');

function DefinedTypesAreUsed(context) {
  var ignoredTypes = ['Query', 'Mutation', 'Subscription'];
  var definedTypes = [];
  var referencedTypes = new Set();

  var recordDefinedType = function recordDefinedType(node) {
    if (ignoredTypes.indexOf(node.name.value) == -1) {
      definedTypes.push(node);
    }
  };

  return {
    ScalarTypeDefinition: recordDefinedType,
    ObjectTypeDefinition: recordDefinedType,
    InterfaceTypeDefinition: recordDefinedType,
    UnionTypeDefinition: recordDefinedType,
    EnumTypeDefinition: recordDefinedType,
    InputObjectTypeDefinition: recordDefinedType,

    NamedType: function NamedType(node, key, parent, path, ancestors) {
      referencedTypes.add(node.name.value);
    },

    Document: {
      leave: function leave(node) {
        definedTypes.forEach(function (node) {
          if (node.kind == 'ObjectTypeDefinition') {
            var implementedInterfaces = node.interfaces.map(function (node) {
              return node.name.value;
            });

            var anyReferencedInterfaces = implementedInterfaces.some(function (interfaceName) {
              return referencedTypes.has(interfaceName);
            });

            if (anyReferencedInterfaces) {
              return;
            }
          }

          if (!referencedTypes.has(node.name.value)) {
            context.reportError(new _validation_error.ValidationError('defined-types-are-used', 'The type `' + node.name.value + '` is defined in the ' + 'schema but not used anywhere.', [node]));
          }
        });
      }
    }
  };
}