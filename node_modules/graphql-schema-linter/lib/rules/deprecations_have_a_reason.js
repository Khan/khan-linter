'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeprecationsHaveAReason = DeprecationsHaveAReason;

var _buildASTSchema = require('graphql/utilities/buildASTSchema');

var _validation_error = require('../validation_error');

function DeprecationsHaveAReason(context) {
  return {
    FieldDefinition: function FieldDefinition(node, key, parent, path, ancestors) {
      var deprecatedDirective = getDeprecatedDirective(node);
      if (!deprecatedDirective) {
        return;
      }

      var reasonArgument = getReasonArgument(deprecatedDirective);
      if (reasonArgument) {
        return;
      }

      var fieldName = node.name.value;
      var parentName = ancestors[ancestors.length - 1].name.value;

      context.reportError(new _validation_error.ValidationError('deprecations-have-a-reason', 'The field `' + parentName + '.' + fieldName + '` is deprecated but has no deprecation reason.', [deprecatedDirective]));
    },
    EnumValueDefinition: function EnumValueDefinition(node, key, parent, path, ancestors) {
      var deprecatedDirective = getDeprecatedDirective(node);
      if (!deprecatedDirective) {
        return;
      }

      var reasonArgument = getReasonArgument(deprecatedDirective);
      if (reasonArgument) {
        return;
      }

      var enumValueName = node.name.value;
      var parentName = ancestors[ancestors.length - 1].name.value;

      context.reportError(new _validation_error.ValidationError('deprecations-have-a-reason', 'The enum value `' + parentName + '.' + enumValueName + '` is deprecated but has no deprecation reason.', [deprecatedDirective]));
    }
  };
}

function getDeprecatedDirective(node) {
  var deprecatedDirective = node.directives.find(function (directive) {
    if (directive.name.value != 'deprecated') {
      return false;
    }

    return true;
  });

  return deprecatedDirective;
}

function getReasonArgument(deprecatedDirective) {
  var reasonArgument = deprecatedDirective.arguments.find(function (arg) {
    if (arg.name.value == 'reason') {
      return true;
    }

    return false;
  });

  return reasonArgument;
}