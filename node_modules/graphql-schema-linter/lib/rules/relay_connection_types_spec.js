'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RelayConnectionTypesSpec = RelayConnectionTypesSpec;

var _validation_error = require('../validation_error');

var _printer = require('graphql/language/printer');

var MANDATORY_FIELDS = ['pageInfo', 'edges'];

function RelayConnectionTypesSpec(context) {
  var ensureNameDoesNotEndWithConnection = function ensureNameDoesNotEndWithConnection(node) {
    if (node.name.value.match(/Connection$/)) {
      context.reportError(new _validation_error.ValidationError('relay-connection-types-spec', 'Types that end in `Connection` must be an object type as per the relay spec. `' + node.name.value + '` is not an object type.', [node]));
    }
  };

  return {
    ScalarTypeDefinition: ensureNameDoesNotEndWithConnection,
    InterfaceTypeDefinition: ensureNameDoesNotEndWithConnection,
    UnionTypeDefinition: ensureNameDoesNotEndWithConnection,
    EnumTypeDefinition: ensureNameDoesNotEndWithConnection,
    InputObjectTypeDefinition: ensureNameDoesNotEndWithConnection,
    ObjectTypeDefinition: function ObjectTypeDefinition(node) {
      var typeName = node.name.value;
      if (!typeName.endsWith('Connection')) {
        return;
      }
      var fieldNames = node.fields.map(function (field) {
        return field.name.value;
      });
      var missingFields = MANDATORY_FIELDS.filter(function (requiredField) {
        return fieldNames.indexOf(requiredField) === -1;
      });

      if (missingFields.length) {
        context.reportError(new _validation_error.ValidationError('relay-connection-types-spec', 'Connection `' + typeName + '` is missing the following field' + (missingFields.length > 1 ? 's' : '') + ': ' + missingFields.join(', ') + '.', [node]));
        return;
      }

      var edgesField = node.fields.find(function (field) {
        return field.name.value == 'edges';
      });
      var edgesFieldType = edgesField.type;

      if (edgesFieldType.kind == 'NonNullType') {
        edgesFieldType = edgesFieldType.type;
      }

      if (edgesFieldType.kind != 'ListType') {
        context.reportError(new _validation_error.ValidationError('relay-connection-types-spec', 'The `' + typeName + '.edges` field must return a list of edges not `' + (0, _printer.print)(edgesFieldType) + '`.', [node]));
      }

      var pageInfoField = node.fields.find(function (field) {
        return field.name.value == 'pageInfo';
      });
      var printedPageInfoFieldType = (0, _printer.print)(pageInfoField.type);

      if (printedPageInfoFieldType != 'PageInfo!') {
        context.reportError(new _validation_error.ValidationError('relay-connection-types-spec', 'The `' + typeName + '.pageInfo` field must return a non-null `PageInfo` object not `' + printedPageInfoFieldType + '`', [node]));
      }
    }
  };
}