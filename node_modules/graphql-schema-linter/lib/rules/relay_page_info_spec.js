'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RelayPageInfoSpec = RelayPageInfoSpec;

var _validation_error = require('../validation_error');

var _printer = require('graphql/language/printer');

function RelayPageInfoSpec(context) {
  return {
    Document: {
      leave: function leave(node) {
        var pageInfoType = context.getSchema().getType('PageInfo');

        if (!pageInfoType) {
          return context.reportError(new _validation_error.ValidationError('relay-page-info-spec', 'A `PageInfo` object type is required as per the Relay spec.', [node]));
        }

        var pageInfoFields = pageInfoType.getFields();

        var hasPreviousPageField = pageInfoFields['hasPreviousPage'];

        if (!hasPreviousPageField) {
          context.reportError(new _validation_error.ValidationError('relay-page-info-spec', 'The `PageInfo` object type must have a `hasPreviousPage` field that returns a non-null Boolean as per the Relay spec.', [pageInfoType.astNode]));
        } else if (hasPreviousPageField.type != 'Boolean!') {
          context.reportError(new _validation_error.ValidationError('relay-page-info-spec', 'The `PageInfo` object type must have a `hasPreviousPage` field that returns a non-null Boolean as per the Relay spec.', [hasPreviousPageField.astNode]));
        }

        var hasNextPageField = pageInfoFields['hasNextPage'];

        if (!hasNextPageField) {
          context.reportError(new _validation_error.ValidationError('relay-page-info-spec', 'The `PageInfo` object type must have a `hasNextPage` field that returns a non-null Boolean as per the Relay spec.', [pageInfoType.astNode]));
        } else if (hasNextPageField.type != 'Boolean!') {
          context.reportError(new _validation_error.ValidationError('relay-page-info-spec', 'The `PageInfo` object type must have a `hasNextPage` field that returns a non-null Boolean as per the Relay spec.', [hasNextPageField.astNode]));
        }
      }
    }
  };
}