'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypesHaveDescriptions = TypesHaveDescriptions;

var _buildASTSchema = require('graphql/utilities/buildASTSchema');

var _validation_error = require('../validation_error');

var _description_util = require('./description_util.js');

function descriptionHasValidFirstline(description) {
  return description.match(/^[^\n]+(\n\n|$)/);
}

function reportError(error, context, node, typeKind) {
  var interfaceTypeName = node.name.value;

  context.reportError(new _validation_error.ValidationError('types-have-descriptions', 'The ' + typeKind + ' type `' + interfaceTypeName + '`s description ' + error + '.', [node]));
}

function validateTypeHasDescription(configuration, context, node, typeKind) {
  var description = (0, _buildASTSchema.getDescription)(node, {
    commentDescriptions: configuration.getCommentDescriptions()
  });

  if (!description) {
    return reportError('is missing', context, node, typeKind);
  }

  var descriptionWithQuotes = (0, _description_util.fullDescription)(node);

  if (!(0, _description_util.blankLineBeforeNode)(node)) {
    reportError('should have a blank line before it', context, node, typeKind);
  }

  if (!descriptionHasValidFirstline(description)) {
    reportError('should have a one-line firstline, then optionally a blank line followed by other text', context, node, typeKind);
  }

  if (!(0, _description_util.leadingQuotesAreTripleQuote)(descriptionWithQuotes)) {
    reportError('should use triple-quotes', context, node, typeKind);
  }

  if (!(0, _description_util.leadingQuotesOnTheirOwnLine)(descriptionWithQuotes)) {
    reportError('should put the leading triple-quote on its own line', context, node, typeKind);
  }

  if (!(0, _description_util.trailingQuotesOnTheirOwnLine)(descriptionWithQuotes)) {
    reportError('should put the trailing triple-quote on its own line', context, node, typeKind);
  }
}

function TypesHaveDescriptions(configuration, context) {
  return {
    TypeExtensionDefinition: function TypeExtensionDefinition(node) {
      return false;
    },
    ScalarTypeDefinition: function ScalarTypeDefinition(node) {
      // We do not require docstrings for scalars because they
      // are not things we define; we're just making use of them.
      // validateTypeHasDescription(configuration, context, node, 'scalar');
    },
    ObjectTypeDefinition: function ObjectTypeDefinition(node) {
      validateTypeHasDescription(configuration, context, node, 'object');
    },
    InterfaceTypeDefinition: function InterfaceTypeDefinition(node) {
      validateTypeHasDescription(configuration, context, node, 'interface');
    },
    UnionTypeDefinition: function UnionTypeDefinition(node) {
      validateTypeHasDescription(configuration, context, node, 'union');
    },
    EnumTypeDefinition: function EnumTypeDefinition(node) {
      validateTypeHasDescription(configuration, context, node, 'enum');
    },
    InputObjectTypeDefinition: function InputObjectTypeDefinition(node) {
      validateTypeHasDescription(configuration, context, node, 'input object');
    }
  };
}