'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SourceMap = exports.SourceMap = function () {
  function SourceMap(sourceFiles) {
    _classCallCheck(this, SourceMap);

    this.sourceFiles = sourceFiles;
    this.offsets = this._computeOffsets();
  }

  _createClass(SourceMap, [{
    key: '_computeOffsets',
    value: function _computeOffsets() {
      var _this = this;

      var currentOffset = 1;

      var paths = Object.keys(this.sourceFiles);

      return paths.reduce(function (offsets, path) {
        var currentSegment = _this.sourceFiles[path];
        var currentSegmentLines = currentSegment.match(/\r?\n/g);
        var amountLines = currentSegmentLines ? currentSegmentLines.length : 0;

        var startLine = currentOffset;
        var endLine = currentOffset + amountLines;

        currentOffset = currentOffset + amountLines + 1;

        offsets[path] = {
          startLine: startLine,
          endLine: endLine,
          filename: path
        };

        return offsets;
      }, {});
    }
  }, {
    key: 'getCombinedSource',
    value: function getCombinedSource() {
      return getObjectValues(this.sourceFiles).join('\n');
    }
  }, {
    key: 'getOriginalPathForLine',
    value: function getOriginalPathForLine(lineNumber) {
      var offsets = getObjectValues(this.offsets);

      for (var i = 0; i < offsets.length; i++) {
        if (offsets[i].startLine <= lineNumber && lineNumber <= offsets[i].endLine) {
          return offsets[i].filename;
        }
      }
    }
  }, {
    key: 'getOffsetForPath',
    value: function getOffsetForPath(path) {
      return this.offsets[path];
    }
  }]);

  return SourceMap;
}();

function getObjectValues(arr) {
  return Object.keys(arr).map(function (key) {
    return arr[key];
  });
}