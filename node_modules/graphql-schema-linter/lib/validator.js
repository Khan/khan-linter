"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateSchemaDefinition = validateSchemaDefinition;

var _graphql = require("graphql");

var _validation = require("graphql/validation");

var _buildASTSchema = require("graphql/utilities/buildASTSchema");

var _error = require("graphql/error");

var _validate = require("graphql/validation/validate");

var _validate2 = require("graphql/type/validate");

var _validation_error = require("./validation_error");

function validateSchemaDefinition(schemaDefinition, rules, configuration) {
  let ast;
  let parseOptions = {};

  if (configuration.getOldImplementsSyntax()) {
    parseOptions.allowLegacySDLImplementsInterfaces = true;
  }

  try {
    ast = (0, _graphql.parse)(schemaDefinition, parseOptions);
  } catch (e) {
    if (e instanceof _error.GraphQLError) {
      e.ruleName = 'graphql-syntax-error';
      return [e];
    } else {
      throw e;
    }
  }

  let schemaErrors = (0, _validate.validateSDL)(ast);

  if (schemaErrors.length > 0) {
    return sortErrors(schemaErrors.map(error => {
      return new _validation_error.ValidationError('invalid-graphql-schema', error.message, error.nodes);
    }));
  }

  const schema = (0, _buildASTSchema.buildASTSchema)(ast, {
    commentDescriptions: configuration.getCommentDescriptions(),
    assumeValidSDL: true,
    assumeValid: true
  });
  schema.__validationErrors = undefined;
  schemaErrors = (0, _validate2.validateSchema)(schema);

  if (schemaErrors.length > 0) {
    return sortErrors(schemaErrors.map(error => {
      return new _validation_error.ValidationError('invalid-graphql-schema', error.message, error.nodes || ast);
    }));
  }

  const rulesWithConfiguration = rules.map(rule => {
    return ruleWithConfiguration(rule, configuration);
  });
  const errors = (0, _validation.validate)(schema, ast, rulesWithConfiguration);
  const sortedErrors = sortErrors(errors);
  return sortedErrors;
}

function sortErrors(errors) {
  return errors.sort((a, b) => {
    return a.locations[0].line - b.locations[0].line;
  });
}

function ruleWithConfiguration(rule, configuration) {
  if (rule.length == 2) {
    return function (context) {
      return rule(configuration, context);
    };
  } else {
    return rule;
  }
}